ParseOk
  ( Module
      SrcSpanInfo
        { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 1 1 36 1
        , srcInfoPoints =
            [ SrcSpan "tests/examples/List2.hs" 1 1 1 1
            , SrcSpan "tests/examples/List2.hs" 2 1 2 1
            , SrcSpan "tests/examples/List2.hs" 3 1 3 1
            , SrcSpan "tests/examples/List2.hs" 4 1 4 1
            , SrcSpan "tests/examples/List2.hs" 5 1 5 1
            , SrcSpan "tests/examples/List2.hs" 6 1 6 1
            , SrcSpan "tests/examples/List2.hs" 7 1 7 1
            , SrcSpan "tests/examples/List2.hs" 8 1 8 1
            , SrcSpan "tests/examples/List2.hs" 9 1 9 1
            , SrcSpan "tests/examples/List2.hs" 10 1 10 1
            , SrcSpan "tests/examples/List2.hs" 11 1 11 1
            , SrcSpan "tests/examples/List2.hs" 12 1 12 1
            , SrcSpan "tests/examples/List2.hs" 13 1 13 1
            , SrcSpan "tests/examples/List2.hs" 14 1 14 1
            , SrcSpan "tests/examples/List2.hs" 15 1 15 1
            , SrcSpan "tests/examples/List2.hs" 30 1 30 1
            , SrcSpan "tests/examples/List2.hs" 30 1 30 1
            , SrcSpan "tests/examples/List2.hs" 32 1 32 1
            , SrcSpan "tests/examples/List2.hs" 33 1 33 1
            , SrcSpan "tests/examples/List2.hs" 34 1 34 1
            , SrcSpan "tests/examples/List2.hs" 36 1 36 1
            , SrcSpan "tests/examples/List2.hs" 36 1 36 1
            ]
        }
      (Just
         (ModuleHead
            SrcSpanInfo
              { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 30 1 30 30
              , srcInfoPoints =
                  [ SrcSpan "tests/examples/List2.hs" 30 1 30 7
                  , SrcSpan "tests/examples/List2.hs" 30 25 30 30
                  ]
              }
            (ModuleName
               SrcSpanInfo
                 { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 30 8 30 24
                 , srcInfoPoints = []
                 }
               "Type.Family.List")
            Nothing
            Nothing))
      [ LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 1 1 1 40
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 1 1 1 13
                , SrcSpan "tests/examples/List2.hs" 1 37 1 40
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 1 14 1 36
                , srcInfoPoints = []
                }
              "TypeFamilyDependencies"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 2 1 2 33
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 2 1 2 13
                , SrcSpan "tests/examples/List2.hs" 2 30 2 33
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 2 14 2 29
                , srcInfoPoints = []
                }
              "PatternSynonyms"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 3 1 3 33
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 3 1 3 13
                , SrcSpan "tests/examples/List2.hs" 3 30 3 33
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 3 14 3 29
                , srcInfoPoints = []
                }
              "ConstraintKinds"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 4 1 4 28
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 4 1 4 13
                , SrcSpan "tests/examples/List2.hs" 4 25 4 28
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 4 14 4 24
                , srcInfoPoints = []
                }
              "RankNTypes"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 5 1 5 36
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 5 1 5 13
                , SrcSpan "tests/examples/List2.hs" 5 33 5 36
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 5 14 5 32
                , srcInfoPoints = []
                }
              "StandaloneDeriving"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 6 1 6 35
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 6 1 6 13
                , SrcSpan "tests/examples/List2.hs" 6 32 6 35
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 6 14 6 31
                , srcInfoPoints = []
                }
              "FlexibleInstances"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 7 1 7 40
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 7 1 7 13
                , SrcSpan "tests/examples/List2.hs" 7 37 7 40
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 7 14 7 36
                , srcInfoPoints = []
                }
              "FunctionalDependencies"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 8 1 8 38
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 8 1 8 13
                , SrcSpan "tests/examples/List2.hs" 8 35 8 38
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 8 14 8 34
                , srcInfoPoints = []
                }
              "UndecidableInstances"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 9 1 9 30
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 9 1 9 13
                , SrcSpan "tests/examples/List2.hs" 9 27 9 30
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 9 14 9 26
                , srcInfoPoints = []
                }
              "TypeFamilies"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 10 1 10 28
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 10 1 10 13
                , SrcSpan "tests/examples/List2.hs" 10 25 10 28
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 10 14 10 24
                , srcInfoPoints = []
                }
              "LambdaCase"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 11 1 11 31
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 11 1 11 13
                , SrcSpan "tests/examples/List2.hs" 11 28 11 31
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 11 14 11 27
                , srcInfoPoints = []
                }
              "TypeOperators"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 12 1 12 32
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 12 1 12 13
                , SrcSpan "tests/examples/List2.hs" 12 29 12 32
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 12 14 12 28
                , srcInfoPoints = []
                }
              "KindSignatures"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 13 1 13 27
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 13 1 13 13
                , SrcSpan "tests/examples/List2.hs" 13 24 13 27
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 13 14 13 23
                , srcInfoPoints = []
                }
              "DataKinds"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 14 1 14 27
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 14 1 14 13
                , SrcSpan "tests/examples/List2.hs" 14 24 14 27
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 14 14 14 23
                , srcInfoPoints = []
                }
              "PolyKinds"
          ]
      , LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 15 1 15 23
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 15 1 15 13
                , SrcSpan "tests/examples/List2.hs" 15 20 15 23
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 15 14 15 19
                , srcInfoPoints = []
                }
              "GADTs"
          ]
      ]
      []
      [ TypeDecl
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 32 1 32 16
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 32 1 32 5
                , SrcSpan "tests/examples/List2.hs" 32 11 32 12
                ]
            }
          (DHead
             SrcSpanInfo
               { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 32 6 32 7
               , srcInfoPoints = []
               }
             (Ident
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 32 6 32 7
                  , srcInfoPoints = []
                  }
                "\216"))
          (TyPromoted
             SrcSpanInfo
               { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 32 13 32 16
               , srcInfoPoints =
                   [ SrcSpan "tests/examples/List2.hs" 32 13 32 14
                   , SrcSpan "tests/examples/List2.hs" 32 15 32 16
                   ]
               }
             (PromotedList
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 32 13 32 16
                  , srcInfoPoints =
                      [ SrcSpan "tests/examples/List2.hs" 32 13 32 14
                      , SrcSpan "tests/examples/List2.hs" 32 15 32 16
                      ]
                  }
                True
                []))
      , TypeDecl
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 33 1 33 17
            , srcInfoPoints =
                [ SrcSpan "tests/examples/List2.hs" 33 1 33 5
                , SrcSpan "tests/examples/List2.hs" 33 11 33 12
                ]
            }
          (DHead
             SrcSpanInfo
               { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 33 6 33 10
               , srcInfoPoints =
                   [ SrcSpan "tests/examples/List2.hs" 33 6 33 7
                   , SrcSpan "tests/examples/List2.hs" 33 7 33 9
                   , SrcSpan "tests/examples/List2.hs" 33 9 33 10
                   ]
               }
             (Symbol
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 33 7 33 9
                  , srcInfoPoints = []
                  }
                ":<"))
          (TyPromoted
             SrcSpanInfo
               { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 33 13 33 17
               , srcInfoPoints = [ SrcSpan "tests/examples/List2.hs" 33 13 33 14 ]
               }
             (PromotedCon
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 33 13 33 17
                  , srcInfoPoints = [ SrcSpan "tests/examples/List2.hs" 33 13 33 14 ]
                  }
                True
                (Special
                   SrcSpanInfo
                     { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 33 14 33 17
                     , srcInfoPoints =
                         [ SrcSpan "tests/examples/List2.hs" 33 14 33 15
                         , SrcSpan "tests/examples/List2.hs" 33 15 33 16
                         , SrcSpan "tests/examples/List2.hs" 33 16 33 17
                         ]
                     }
                   (Cons
                      SrcSpanInfo
                        { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 33 15 33 16
                        , srcInfoPoints = []
                        }))))
      , InfixDecl
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 34 1 34 12
            , srcInfoPoints = [ SrcSpan "tests/examples/List2.hs" 34 8 34 9 ]
            }
          (AssocRight
             SrcSpanInfo
               { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 34 1 34 7
               , srcInfoPoints = []
               })
          (Just 5)
          [ ConOp
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 34 10 34 12
                , srcInfoPoints = []
                }
              (Symbol
                 SrcSpanInfo
                   { srcInfoSpan = SrcSpan "tests/examples/List2.hs" 34 10 34 12
                   , srcInfoPoints = []
                   }
                 ":<")
          ]
      ]
  , [ Comment
        False
        (SrcSpan "tests/examples/List2.hs" 16 1 16 78)
        "---------------------------------------------------------------------------"
    , Comment False (SrcSpan "tests/examples/List2.hs" 17 1 17 5) " |"
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 18 1 18 35)
        " Module      :  Type.Family.List"
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 19 1 19 49)
        " Copyright   :  Copyright (C) 2015 Kyle Carter"
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 20 1 20 23)
        " License     :  BSD3"
    , Comment False (SrcSpan "tests/examples/List2.hs" 21 1 21 3) ""
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 22 1 22 53)
        " Maintainer  :  Kyle Carter <kylcarte@indiana.edu>"
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 23 1 23 31)
        " Stability   :  experimental"
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 24 1 24 29)
        " Portability :  RankNTypes"
    , Comment False (SrcSpan "tests/examples/List2.hs" 25 1 25 3) ""
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 26 1 26 57)
        " Convenient aliases and type families for working with"
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 27 1 27 21)
        " type-level lists."
    , Comment
        False
        (SrcSpan "tests/examples/List2.hs" 28 1 28 77)
        "--------------------------------------------------------------------------"
    ]
  )
