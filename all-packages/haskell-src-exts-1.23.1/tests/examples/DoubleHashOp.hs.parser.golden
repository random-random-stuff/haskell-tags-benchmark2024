ParseOk
  ( Module
      SrcSpanInfo
        { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 1 1 13 1
        , srcInfoPoints =
            [ SrcSpan "tests/examples/DoubleHashOp.hs" 1 1 1 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 2 1 2 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 2 1 2 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 4 1 4 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 5 1 5 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 7 1 7 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 8 1 8 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 13 1 13 1
            , SrcSpan "tests/examples/DoubleHashOp.hs" 13 1 13 1
            ]
        }
      (Just
         (ModuleHead
            SrcSpanInfo
              { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 2 1 2 26
              , srcInfoPoints =
                  [ SrcSpan "tests/examples/DoubleHashOp.hs" 2 1 2 7
                  , SrcSpan "tests/examples/DoubleHashOp.hs" 2 21 2 26
                  ]
              }
            (ModuleName
               SrcSpanInfo
                 { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 2 8 2 20
                 , srcInfoPoints = []
                 }
               "DoubleHashOp")
            Nothing
            Nothing))
      [ LanguagePragma
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 1 1 1 31
            , srcInfoPoints =
                [ SrcSpan "tests/examples/DoubleHashOp.hs" 1 1 1 13
                , SrcSpan "tests/examples/DoubleHashOp.hs" 1 28 1 31
                ]
            }
          [ Ident
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 1 14 1 27
                , srcInfoPoints = []
                }
              "UnboxedTuples"
          ]
      ]
      []
      [ TypeSig
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 1 4 22
            , srcInfoPoints =
                [ SrcSpan "tests/examples/DoubleHashOp.hs" 4 6 4 8 ]
            }
          [ Symbol
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 1 4 5
                , srcInfoPoints =
                    [ SrcSpan "tests/examples/DoubleHashOp.hs" 4 1 4 2
                    , SrcSpan "tests/examples/DoubleHashOp.hs" 4 2 4 4
                    , SrcSpan "tests/examples/DoubleHashOp.hs" 4 4 4 5
                    ]
                }
              "##"
          ]
          (TyFun
             SrcSpanInfo
               { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 9 4 22
               , srcInfoPoints =
                   [ SrcSpan "tests/examples/DoubleHashOp.hs" 4 11 4 13 ]
               }
             (TyVar
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 9 4 10
                  , srcInfoPoints = []
                  }
                (Ident
                   SrcSpanInfo
                     { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 9 4 10
                     , srcInfoPoints = []
                     }
                   "a"))
             (TyFun
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 14 4 22
                  , srcInfoPoints =
                      [ SrcSpan "tests/examples/DoubleHashOp.hs" 4 16 4 18 ]
                  }
                (TyVar
                   SrcSpanInfo
                     { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 14 4 15
                     , srcInfoPoints = []
                     }
                   (Ident
                      SrcSpanInfo
                        { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 14 4 15
                        , srcInfoPoints = []
                        }
                      "b"))
                (TyCon
                   SrcSpanInfo
                     { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 19 4 22
                     , srcInfoPoints = []
                     }
                   (UnQual
                      SrcSpanInfo
                        { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 19 4 22
                        , srcInfoPoints = []
                        }
                      (Ident
                         SrcSpanInfo
                           { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 4 19 4 22
                           , srcInfoPoints = []
                           }
                         "Int")))))
      , FunBind
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 1 5 11
            , srcInfoPoints = []
            }
          [ InfixMatch
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 1 5 11
                , srcInfoPoints = []
                }
              (PVar
                 SrcSpanInfo
                   { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 1 5 2
                   , srcInfoPoints = []
                   }
                 (Ident
                    SrcSpanInfo
                      { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 1 5 2
                      , srcInfoPoints = []
                      }
                    "a"))
              (Symbol
                 SrcSpanInfo
                   { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 3 5 5
                   , srcInfoPoints = []
                   }
                 "##")
              [ PVar
                  SrcSpanInfo
                    { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 6 5 7
                    , srcInfoPoints = []
                    }
                  (Ident
                     SrcSpanInfo
                       { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 6 5 7
                       , srcInfoPoints = []
                       }
                     "b")
              ]
              (UnGuardedRhs
                 SrcSpanInfo
                   { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 8 5 11
                   , srcInfoPoints =
                       [ SrcSpan "tests/examples/DoubleHashOp.hs" 5 8 5 9 ]
                   }
                 (Lit
                    SrcSpanInfo
                      { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 10 5 11
                      , srcInfoPoints = []
                      }
                    (Int
                       SrcSpanInfo
                         { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 5 10 5 11
                         , srcInfoPoints = []
                         }
                       0
                       "0")))
              Nothing
          ]
      , TypeSig
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 1 7 22
            , srcInfoPoints =
                [ SrcSpan "tests/examples/DoubleHashOp.hs" 7 6 7 8 ]
            }
          [ Symbol
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 1 7 5
                , srcInfoPoints =
                    [ SrcSpan "tests/examples/DoubleHashOp.hs" 7 1 7 2
                    , SrcSpan "tests/examples/DoubleHashOp.hs" 7 2 7 4
                    , SrcSpan "tests/examples/DoubleHashOp.hs" 7 4 7 5
                    ]
                }
              "#*"
          ]
          (TyFun
             SrcSpanInfo
               { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 9 7 22
               , srcInfoPoints =
                   [ SrcSpan "tests/examples/DoubleHashOp.hs" 7 11 7 13 ]
               }
             (TyVar
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 9 7 10
                  , srcInfoPoints = []
                  }
                (Ident
                   SrcSpanInfo
                     { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 9 7 10
                     , srcInfoPoints = []
                     }
                   "a"))
             (TyFun
                SrcSpanInfo
                  { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 14 7 22
                  , srcInfoPoints =
                      [ SrcSpan "tests/examples/DoubleHashOp.hs" 7 16 7 18 ]
                  }
                (TyVar
                   SrcSpanInfo
                     { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 14 7 15
                     , srcInfoPoints = []
                     }
                   (Ident
                      SrcSpanInfo
                        { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 14 7 15
                        , srcInfoPoints = []
                        }
                      "b"))
                (TyCon
                   SrcSpanInfo
                     { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 19 7 22
                     , srcInfoPoints = []
                     }
                   (UnQual
                      SrcSpanInfo
                        { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 19 7 22
                        , srcInfoPoints = []
                        }
                      (Ident
                         SrcSpanInfo
                           { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 7 19 7 22
                           , srcInfoPoints = []
                           }
                         "Int")))))
      , FunBind
          SrcSpanInfo
            { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 1 8 11
            , srcInfoPoints = []
            }
          [ InfixMatch
              SrcSpanInfo
                { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 1 8 11
                , srcInfoPoints = []
                }
              (PVar
                 SrcSpanInfo
                   { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 1 8 2
                   , srcInfoPoints = []
                   }
                 (Ident
                    SrcSpanInfo
                      { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 1 8 2
                      , srcInfoPoints = []
                      }
                    "a"))
              (Symbol
                 SrcSpanInfo
                   { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 3 8 5
                   , srcInfoPoints = []
                   }
                 "#*")
              [ PVar
                  SrcSpanInfo
                    { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 6 8 7
                    , srcInfoPoints = []
                    }
                  (Ident
                     SrcSpanInfo
                       { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 6 8 7
                       , srcInfoPoints = []
                       }
                     "b")
              ]
              (UnGuardedRhs
                 SrcSpanInfo
                   { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 8 8 11
                   , srcInfoPoints =
                       [ SrcSpan "tests/examples/DoubleHashOp.hs" 8 8 8 9 ]
                   }
                 (Lit
                    SrcSpanInfo
                      { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 10 8 11
                      , srcInfoPoints = []
                      }
                    (Int
                       SrcSpanInfo
                         { srcInfoSpan = SrcSpan "tests/examples/DoubleHashOp.hs" 8 10 8 11
                         , srcInfoPoints = []
                         }
                       1
                       "1")))
              Nothing
          ]
      ]
  , [ Comment
        False
        (SrcSpan "tests/examples/DoubleHashOp.hs" 10 1 10 36)
        " This still does not work though:"
    , Comment
        False
        (SrcSpan "tests/examples/DoubleHashOp.hs" 11 1 11 24)
        " (#) :: a -> b -> Int"
    , Comment
        False
        (SrcSpan "tests/examples/DoubleHashOp.hs" 12 1 12 13)
        " a # b = 2"
    ]
  )
